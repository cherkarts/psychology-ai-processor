#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ write_adapted_article_enhanced
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: –æ–±—ã—á–Ω–∞—è vs —É–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
"""

import os
import sys
from article_writer import ArticleWriter

def test_enhanced_quality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_analysis = {
        'main_theme': '–°—Ç—Ä–µ—Å—Å –∏ —Ç—Ä–µ–≤–æ–≥–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ',
        'main_message': '–°—Ç—Ä–µ—Å—Å –º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫',
        'interesting_facts': [
            '90% –ª—é–¥–µ–π –∏—Å–ø—ã—Ç—ã–≤–∞—é—Ç —Å—Ç—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
            '–°—Ç—Ä–µ—Å—Å –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–º–º—É–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É',
            '–ú–µ–¥–∏—Ç–∞—Ü–∏—è —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ç–∏–∑–æ–ª–∞ –Ω–∞ 25%'
        ],
        'hidden_truths': [
            '–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä—è—Ç –æ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç–æ–≤',
            '–ú–Ω–æ–≥–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏',
            '–°—Ç—Ä–µ—Å—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –≤ –º–∞–ª—ã—Ö –¥–æ–∑–∞—Ö'
        ],
        'practical_advice': [
            '–¢–µ—Ö–Ω–∏–∫–∞ 4-7-8 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É—Å–ø–æ–∫–æ–µ–Ω–∏—è',
            '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –º—ã—à–µ—á–Ω–∞—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è',
            '–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
        ]
    }
    
    print("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 60)
    
    try:
        writer = ArticleWriter()
        print("‚úÖ ArticleWriter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        print("\nüìù –¢–ï–°–¢ 1: –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞...")
        article_quality = writer.write_adapted_article_quality(test_analysis)
        
        # –¢–µ—Å—Ç 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        print("\nüìù –¢–ï–°–¢ 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ + —É–ª—É—á—à–µ–Ω–∏–µ)...")
        article_enhanced = writer.write_adapted_article_enhanced(test_analysis)
        
        if article_quality and article_enhanced:
            print("\n‚úÖ –û–ë–ï –°–¢–ê–¢–¨–ò –£–°–ü–ï–®–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´!")
            print("=" * 60)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö:")
            print("-" * 40)
            print(f"üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–±—ã—á–Ω–∞—è): {article_quality['title']}")
            print(f"üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—É–ª—É—á—à–µ–Ω–Ω–∞—è): {article_enhanced['title']}")
            print(f"üìè –î–ª–∏–Ω–∞ (–æ–±—ã—á–Ω–∞—è): {len(article_quality['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìè –î–ª–∏–Ω–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è): {len(article_enhanced['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìù –°–ª–æ–≤ (–æ–±—ã—á–Ω–∞—è): {article_quality['word_count']}")
            print(f"üìù –°–ª–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è): {article_enhanced['word_count']}")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            print("\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:")
            print("-" * 40)
            
            def analyze_quality(content, name):
                content_lower = content.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
                techniques = ['4-7-8', '–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è', '–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ', '–º–µ–¥–∏—Ç–∞—Ü–∏—è', '—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è']
                found_techniques = [t for t in techniques if t in content_lower]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_words = ['90%', '25%', '–ø—Ä–æ—Ü–µ–Ω—Ç', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', '–¥–∞–Ω–Ω—ã–µ']
                found_stats = [s for s in stats_words if s in content_lower]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                structure_words = ['–≤–≤–µ–¥–µ–Ω–∏–µ', '–∞–Ω–∞–ª–∏–∑', '—Ç–µ—Ö–Ω–∏–∫–∏', '–≤—ã–≤–æ–¥—ã', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ', '–ø—Ä–∏—á–∏–Ω—ã']
                found_structure = [s for s in structure_words if s in content_lower]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
                bad_phrases = ['–≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å', '—Å–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–Ω–∏–º–∞—Ç—å', '—Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å']
                found_bad = [p for p in bad_phrases if p in content_lower]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
                explanation_words = ['–ø–æ—Ç–æ–º—É —á—Ç–æ', '–ø–æ—ç—Ç–æ–º—É', '–º–µ—Ö–∞–Ω–∏–∑–º', '–ø—Ä–∏—á–∏–Ω–∞', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ—á–µ–º—É']
                found_explanations = [e for e in explanation_words if e in content_lower]
                
                # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
                quality_score = 0
                if len(found_techniques) >= 2:
                    quality_score += 2
                if len(found_stats) >= 1:
                    quality_score += 2
                if len(found_structure) >= 3:
                    quality_score += 2
                if len(found_bad) == 0:
                    quality_score += 2
                if len(found_explanations) >= 3:
                    quality_score += 2
                
                print(f"\n{name}:")
                print(f"  ‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {len(found_techniques)}/{len(techniques)} - {found_techniques}")
                print(f"  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(found_stats)}/{len(stats_words)} - {found_stats}")
                print(f"  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(found_structure)}/{len(structure_words)} - {found_structure}")
                print(f"  ‚ùå –û–±—â–∏–µ —Ñ—Ä–∞–∑—ã: {len(found_bad)}/{len(bad_phrases)} - {found_bad}")
                print(f"  üí° –û–±—ä—è—Å–Ω–µ–Ω–∏—è: {len(found_explanations)}/{len(explanation_words)} - {found_explanations}")
                print(f"  üéØ –û—Ü–µ–Ω–∫–∞: {quality_score}/10")
                
                return quality_score
            
            score_quality = analyze_quality(article_quality['content'], "üìù –û–ë–´–ß–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø")
            score_enhanced = analyze_quality(article_enhanced['content'], "üåü –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø")
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            print("\nüèÜ –ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
            print("=" * 40)
            print(f"üìä –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {score_quality}/10")
            print(f"üìä –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {score_enhanced}/10")
            
            if score_enhanced > score_quality:
                print(f"üéâ –£–õ–£–ß–®–ï–ù–ò–ï: +{score_enhanced - score_quality} –±–∞–ª–ª–æ–≤!")
            elif score_enhanced == score_quality:
                print("ü§î –ö–∞—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ")
            else:
                print("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            print("\nüìÑ –§–†–ê–ì–ú–ï–ù–¢–´ –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø:")
            print("-" * 40)
            print("–û–ë–´–ß–ù–ê–Ø (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(article_quality['content'][:300] + "...")
            print("\n–£–õ–£–ß–®–ï–ù–ù–ê–Ø (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(article_enhanced['content'][:300] + "...")
            
            return True
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_enhanced_quality()
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–æ–º
"""

import json
import os
import requests
import logging
from datetime import datetime
from typing import List, Dict, Optional

class SiteIntegration:
    def __init__(self, site_url: str, admin_api_key: str = None):
        self.site_url = site_url.rstrip('/')
        self.admin_api_key = admin_api_key
        
    def upload_article_to_site(self, article: Dict) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ —Å–∞–π—Ç —á–µ—Ä–µ–∑ API"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            article_data = {
                'title': article['title'],
                'content': article['content'],
                'excerpt': article['excerpt'],
                'meta_title': article['meta_title'],
                'meta_description': article['meta_description'],
                'tags': ','.join(article['tags']),
                'category_id': self._get_category_id(article['category']),
                'featured_image': article.get('featured_image', ''),
                'is_active': 1,
                'author': 'AI Assistant',
                'source': article.get('source', 'Psychology Today'),
                'processing_date': article.get('processing_date', datetime.now().strftime('%Y-%m-%d'))
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∞–π—Ç
            response = requests.post(
                f"{self.site_url}/api/ai-save-article.php",
                json=article_data,
                headers={
                    'Content-Type': 'application/json',
                    'Authorization': f'Bearer {self.admin_api_key}' if self.admin_api_key else 'Bearer default-ai-key'
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {article['title'][:50]}...")
                    return True
                else:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ API: {result.get('message', 'Unknown error')}")
            else:
                logging.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            
        return False
    
    def _get_category_id(self, category_name: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        category_mapping = {
            '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è': 1,
            '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ': 2,
            '–û—Ç–Ω–æ—à–µ–Ω–∏—è': 3,
            '–°—Ç—Ä–µ—Å—Å –∏ —Ç—Ä–µ–≤–æ–≥–∞': 4,
            '–î–µ—Ç—Å–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è': 5,
            '–°–µ–º–µ–π–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è': 6
        }
        return category_mapping.get(category_name, 1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"
    
    def upload_articles_from_file(self, json_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            articles = data.get('articles', [])
            results = {
                'total': len(articles),
                'success': 0,
                'failed': 0,
                'errors': []
            }
            
            for article in articles:
                if self.upload_article_to_site(article):
                    results['success'] += 1
                else:
                    results['failed'] += 1
                    results['errors'].append(article['title'])
            
            return results
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return {'total': 0, 'success': 0, 'failed': 0, 'errors': [str(e)]}
    
    def check_site_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º"""
        try:
            response = requests.get(f"{self.site_url}/", timeout=10)
            return response.status_code == 200
        except:
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    logging.basicConfig(level=logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    site_url = os.getenv('SITE_URL', 'https://cherkas-therapy.ru')
    admin_api_key = os.getenv('ADMIN_API_KEY')
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    json_files = [f for f in os.listdir('.') if f.startswith('psychology_articles_') and f.endswith('.json')]
    
    if not json_files:
        logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å–æ —Å—Ç–∞—Ç—å—è–º–∏")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    latest_file = max(json_files, key=os.path.getctime)
    logging.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {latest_file}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
    integrator = SiteIntegration(site_url, admin_api_key)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not integrator.check_site_connection():
        logging.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É: {site_url}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏
    results = integrator.upload_articles_from_file(latest_file)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logging.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ì–†–£–ó–ö–ò:")
    logging.info(f"   –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {results['total']}")
    logging.info(f"   –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {results['success']}")
    logging.info(f"   –û—à–∏–±–æ–∫: {results['failed']}")
    
    if results['errors']:
        logging.info("‚ùå –û—à–∏–±–∫–∏:")
        for error in results['errors']:
            logging.info(f"   - {error}")

if __name__ == "__main__":
    main()

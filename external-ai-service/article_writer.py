#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π
"""

import json
import logging
from typing import Dict, List, Optional
from openai import OpenAI
import os
from dotenv import load_dotenv
import re

load_dotenv()

class ArticleWriter:
    def __init__(self):
        self.client = OpenAI(
            api_key=os.getenv('OPENAI_API_KEY'),
            timeout=300  # 5 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
        )
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        self.writing_model = os.getenv('WRITING_MODEL', 'gpt-3.5-turbo')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å
        self.use_gpt4_for_complex = os.getenv('USE_GPT4_FOR_COMPLEX', 'false').lower() == 'true'
    
    def _select_model_for_topic(self, theme: str) -> str:
        """–í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã"""
        if not self.use_gpt4_for_complex:
            return self.writing_model
        
        # –°–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ GPT-4
        complex_topics = [
            '—Ç—Ä–∞–≤–º–∞', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–∫—Ä–∏–∑–∏—Å', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è',
            '—Å–µ–º—å—è', '–¥–µ—Ç–∏', '—Å–µ–∫—Å', '–ª—é–±–æ–≤—å', '—Ä–∞–∑–≤–æ–¥', '–ø–æ—Ç–µ—Ä—è',
            '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Ç–µ—Ä–∞–ø–∏—è', '–ª–µ—á–µ–Ω–∏–µ', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
        ]
        
        theme_lower = theme.lower()
        for topic in complex_topics:
            if topic in theme_lower:
                return "gpt-4"
        
        return self.writing_model
        
    def write_adapted_article(self, analysis: Dict) -> Optional[Dict]:
        """–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            article = self._try_generate_article(analysis)
            if article:
                return article
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            logging.info("–û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é")
            return self._force_long_article(analysis)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return None
    
    def _build_writing_prompt(self, analysis: Dict) -> str:
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —á–µ—Ç–∫–∏–º–∏ —É–∫–∞–∑–∞–Ω–∏—è–º–∏"""
        return f"""
–ù–ê–ü–ò–®–ò –î–õ–ò–ù–ù–£–Æ –°–¢–ê–¢–¨–Æ –ù–ê –¢–ï–ú–£: "{analysis['main_theme']}"

–û–°–ù–û–í–ù–ê–Ø –ò–î–ï–Ø: {analysis['main_message']}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–ë–™–ï–ú: –ú–ò–ù–ò–ú–£–ú 6000 —Å–∏–º–≤–æ–ª–æ–≤
- –§–û–†–ú–ê–¢: –ß–ò–°–¢–´–ô –¢–ï–ö–°–¢ –ë–ï–ó –†–ê–ó–ú–ï–¢–ö–ò
- –°–¢–ò–õ–¨: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫–∞–∫ –±—É–¥—Ç–æ –ø–∏—à–µ—à—å –¥–ª—è –±–ª–æ–≥–∞

–°–¢–†–£–ö–¢–£–†–ê (—Å–æ–±–ª—é–¥–∞–π —Ç–æ—á–Ω–æ):

–ó–ê–ì–û–õ–û–í–û–ö –°–¢–ê–¢–¨–ò
(–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)

–í–í–ï–î–ï–ù–ò–ï
(3-4 –∞–±–∑–∞—Ü–∞ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã, –Ω–∞—á–Ω–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏)

–ü–†–û–ë–õ–ï–ú–ê –ò –ê–ù–ê–õ–ò–ó  
(4-5 –∞–±–∑–∞—Ü–µ–≤, –≥–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø—Ä–∏—á–∏–Ω –∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤)

–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–®–ï–ù–ò–Ø
(5-6 –∞–±–∑–∞—Ü–µ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏)

–ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´
(3-4 –≤–æ–ø—Ä–æ—Å–∞ —Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏)

–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
(2-3 –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –∞–±–∑–∞—Ü–∞)

–ü–†–ê–í–ò–õ–ê:
- –ù–ò–ö–ê–ö–û–ô HTML-–†–ê–ó–ú–ï–¢–ö–ò
- –ù–ò–ö–ê–ö–û–ì–û MARKDOWN (**–∂–∏—Ä–Ω—ã–π** –∏ —Ç.–¥.)
- –ù–ò–ö–ê–ö–ò–• –ó–í–ï–ó–î–û–ß–ï–ö, –†–ê–ó–î–ï–õ–ò–¢–ï–õ–ï–ô
- –¢–û–õ–¨–ö–û –ß–ò–°–¢–´–ô –¢–ï–ö–°–¢ –° –ê–ë–ó–ê–¶–ê–ú–ò
- –ê–±–∑–∞—Ü—ã —Ä–∞–∑–¥–µ–ª—è–π –æ–¥–Ω–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
- –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–∏—à–∏ –ü–†–û–ü–ò–°–ù–´–ú–ò –±—É–∫–≤–∞–º–∏

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ê:
–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏

–í–í–ï–î–ï–ù–ò–ï
–¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞ –≤–≤–µ–¥–µ–Ω–∏—è...

–¢–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –∞–±–∑–∞—Ü–∞ –≤–≤–µ–¥–µ–Ω–∏—è...

–ü–†–û–ë–õ–ï–ú–ê –ò –ê–ù–ê–õ–ò–ó
–¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞...

–ù–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏!
"""
    
    def _process_article_content(self, content: str, analysis: Dict) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª—é–±–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏
            cleaned_content = self._clean_all_markup(content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
            content_length = len(cleaned_content)
            logging.info(f"–î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: {content_length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if content_length < 4000:
                logging.warning(f"–°—Ç–∞—Ç—å—è –∫–æ—Ä–æ—Ç–∫–∞—è: {content_length}")
                return self._generate_with_gpt4(analysis)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTML
            html_content = self._convert_plain_to_proper_html(cleaned_content)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            title = self._extract_clean_title(cleaned_content)
            
            return {
                'title': title,
                'content': html_content,
                'excerpt': self._generate_excerpt(cleaned_content),
                'meta_title': title,
                'meta_description': self._generate_meta_description(cleaned_content),
                'category': self._determine_category(analysis),
                'tags': self._generate_tags(analysis, cleaned_content),
                'faq': [],
                'word_count': content_length,
                'original_analysis': analysis
            }
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return None
    
    def _regenerate_longer_article(self, analysis: Dict) -> Dict:
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –¥–ª–∏–Ω–µ"""
        try:
            logging.info("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –¥–ª–∏–Ω–µ")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ–º–ø—Ç
            strict_prompt = f"""
{self._build_writing_prompt(analysis)}

üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:**
- –°—Ç–∞—Ç—å—è –î–û–õ–ñ–ù–ê –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5,000 —Å–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
- –ï—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è –∫–æ—Ä–æ—á–µ - —Å—Ç–∞—Ç—å—è –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2-3 –∞–±–∑–∞—Ü–∞
- –î–æ–±–∞–≤–ª—è–π –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤, –∏—Å—Ç–æ—Ä–∏–π, –∫–µ–π—Å–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã h3 –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
- –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –í–∫–ª—é—á–∞–π –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–∏–∫
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã "–ü—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∂–∏–∑–Ω–∏"
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π "—Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –æ–±—â–µ—Å—Ç–≤–æ" –∏–ª–∏ "—Å–µ–º—å–∏ –≤ –†–æ—Å—Å–∏–∏"
- –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º

**–°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –î–õ–ò–ù–ù–û–ô –°–¢–ê–¢–¨–ò:**
<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h1>
<p>–í–≤–µ–¥–µ–Ω–∏–µ (3-4 –∞–±–∑–∞—Ü–∞)</p>

<h2>–†–∞–∑–¥–µ–ª 1</h2>
<p>–ê–±–∑–∞—Ü 1</p>
<p>–ê–±–∑–∞—Ü 2</p>
<p>–ê–±–∑–∞—Ü 3</p>
<h3>–ü–æ–¥—Ä–∞–∑–¥–µ–ª 1.1</h3>
<p>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</p>

<h2>–†–∞–∑–¥–µ–ª 2</h2>
<p>–ê–±–∑–∞—Ü 1</p>
<p>–ê–±–∑–∞—Ü 2</p>
<p>–ê–±–∑–∞—Ü 3</p>
<h3>–ü–æ–¥—Ä–∞–∑–¥–µ–ª 2.1</h3>
<p>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</p>

<h2>–†–∞–∑–¥–µ–ª 3</h2>
<p>–ê–±–∑–∞—Ü 1</p>
<p>–ê–±–∑–∞—Ü 2</p>
<p>–ê–±–∑–∞—Ü 3</p>

<h2>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>
<p>–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –∞–±–∑–∞—Ü—ã</p>
"""
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
            model_to_use = self._select_model_for_topic(analysis.get('theme', ''))
            
            response = self.client.chat.completions.create(
                model=model_to_use,
                messages=[
                    {
                        "role": "system", 
                        "content": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –ø–∏—Å–∞—Ç–µ–ª—å, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –û–ß–ï–ù–¨ –î–õ–ò–ù–ù–´–• –∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π. 

–¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –ü–∏—à–∏ —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º
- –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω–∏
- –ò–∑–±–µ–≥–∞–π –∑–∞–ø–∞–¥–Ω—ã—Ö –∫–ª–∏—à–µ, –∏–º–µ–Ω, —Å–∏—Ç—É–∞—Ü–∏–π
- –ì–æ–≤–æ—Ä–∏ –æ —Ç–æ–º, –æ —á–µ–º –æ–±—ã—á–Ω–æ –º–æ–ª—á–∞—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ, –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã
- –°–æ–∑–¥–∞–≤–∞–π —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥–∞—é—Ç –ª—é–¥—è–º
- –í–°–ï–ì–î–ê –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ, –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –º–∏–Ω–∏–º—É–º 5,000 —Å–∏–º–≤–æ–ª–æ–≤
- –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –Ω–∞–≤—è–∑—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
                    },
                    {"role": "user", "content": strict_prompt}
                ],
                max_tokens=4000,
                temperature=0.8,
                top_p=0.95
            )
            
            article_content = response.choices[0].message.content.strip()
            return self._process_article_content(article_content, analysis)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return None
    
    def _expand_content(self, content: str, analysis: Dict) -> str:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏"""
        try:
            logging.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏")
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            sections = re.findall(r'<h2[^>]*>(.*?)</h2>', content, re.IGNORECASE | re.DOTALL)
            
            if not sections:
                return content
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            first_section = sections[0] if sections else "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"
            
            expansion_prompt = f"""
–†–∞—Å—à–∏—Ä—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç—å–∏, –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤:

–†–ê–ó–î–ï–õ: {first_section}

–¢–ï–ú–ê –°–¢–ê–¢–¨–ò: {analysis.get('main_theme', '')}
–û–°–ù–û–í–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: {analysis.get('main_message', '')}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –î–æ–±–∞–≤—å –º–∏–Ω–∏–º—É–º 500-800 —Å–∏–º–≤–æ–ª–æ–≤ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É
- –í–∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω–∏
- –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã h3 –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
- –°–æ—Ö—Ä–∞–Ω–∏ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ù–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞.
"""
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ä—è–µ—Ç —Å—Ç–∞—Ç—å–∏, –¥–æ–±–∞–≤–ª—è—è –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π."
                    },
                    {"role": "user", "content": expansion_prompt}
                ],
                max_tokens=2000,
                temperature=0.8
            )
            
            expansion = response.choices[0].message.content.strip()
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ h2
            h2_pattern = r'(<h2[^>]*>.*?</h2>)'
            match = re.search(h2_pattern, content, re.IGNORECASE | re.DOTALL)
            
            if match:
                insert_pos = match.end()
                expanded_content = content[:insert_pos] + "\n" + expansion + "\n" + content[insert_pos:]
                return expanded_content
            else:
                return content + "\n" + expansion
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return content
    
    def _validate_article_structure(self, content: str) -> bool:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        # –°—á–∏—Ç–∞–µ–º –∞–±–∑–∞—Ü—ã (—Ä–∞–∑–¥–µ–ª—ã –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º)
        paragraphs = [p for p in content.split('\n\n') if p.strip()]
        
        # –ú–∏–Ω–∏–º—É–º 8 –∞–±–∑–∞—Ü–µ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏
        if len(paragraphs) < 8:
            logging.warning(f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∞–±–∑–∞—Ü–µ–≤: {len(paragraphs)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(content) < 6000:
            logging.warning(f"–°—Ç–∞—Ç—å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return False
        
        return True

    def _check_content_duplication(self, content: str) -> bool:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        paragraphs = [p for p in content.split('\n\n') if p.strip()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        paragraph_starts = set()
        for p in paragraphs:
            start = p[:100].strip()
            if len(start) > 30:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ
                if start in paragraph_starts:
                    logging.warning("–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞–±–∑–∞—Ü—ã")
                    return False
                paragraph_starts.add(start)
        
        return True

    def _clean_all_markup(self, content: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç –≤—Å–µ–π —Ä–∞–∑–º–µ—Ç–∫–∏"""
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        content = re.sub(r'<[^>]+>', '', content)
        # –£–±–∏—Ä–∞–µ–º Markdown (**–∂–∏—Ä–Ω—ã–π**)
        content = re.sub(r'\*\*([^*]+)\*\*', r'\1', content)
        content = re.sub(r'\*([^*]+)\*', r'\1', content)
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        content = re.sub(r'\n\s*\n', '\n\n', content)
        return content.strip()

    def _convert_plain_to_proper_html(self, content: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤—ã–π HTML"""
        lines = content.split('\n')
        html_parts = []
        
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            
            if not line:
                i += 1
                continue
                
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ (–ø–µ—Ä–≤–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
            if i == 0:
                html_parts.append(f'<h1>{line}</h1>')
                i += 1
                continue
                
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ (–ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã)
            if (line.isupper() and 
                any(keyword in line for keyword in ['–í–í–ï–î–ï–ù–ò–ï', '–ü–†–û–ë–õ–ï–ú–ê', '–†–ï–®–ï–ù–ò–Ø', '–í–û–ü–†–û–°–´', '–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï', '–ê–ù–ê–õ–ò–ó'])):
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if '–í–í–ï–î–ï–ù–ò–ï' in line:
                    html_parts.append(f'<h2>–í–≤–µ–¥–µ–Ω–∏–µ</h2>')
                elif any(x in line for x in ['–ü–†–û–ë–õ–ï–ú–ê', '–ê–ù–ê–õ–ò–ó']):
                    html_parts.append(f'<h2>–ü—Ä–æ–±–ª–µ–º–∞ –∏ –∞–Ω–∞–ª–∏–∑</h2>')
                elif '–†–ï–®–ï–ù–ò–Ø' in line:
                    html_parts.append(f'<h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è</h2>')
                elif '–í–û–ü–†–û–°–´' in line:
                    html_parts.append(f'<h2>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>')
                elif '–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï' in line:
                    html_parts.append(f'<h2>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>')
                else:
                    html_parts.append(f'<h2>{line.title()}</h2>')
                    
                i += 1
                continue
                
            # –û–±—ã—á–Ω—ã–µ –∞–±–∑–∞—Ü—ã
            if line and not line.isupper():
                # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–±–∑–∞—Ü
                paragraph = line
                i += 1
                while i < len(lines) and lines[i].strip() and not lines[i].strip().isupper():
                    paragraph += ' ' + lines[i].strip()
                    i += 1
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã
                if paragraph.strip().startswith('*') or paragraph.strip().endswith('?'):
                    html_parts.append(f'<p><strong>{paragraph.strip(" *")}</strong></p>')
                else:
                    html_parts.append(f'<p>{paragraph}</p>')
                continue
                
            i += 1
        
        return '\n\n'.join(html_parts)

    def _extract_clean_title(self, content: str) -> str:
        """–ò–∑–≤–ª–µ—á—å —á–∏—Å—Ç—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        first_line = content.split('\n')[0].strip()
        # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏
        title = re.sub(r'[**]', '', first_line)
        return title[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

    def _generate_with_gpt4(self, analysis: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GPT-4 –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        try:
            simple_prompt = f"""
–ù–∞–ø–∏—à–∏ –¥–ª–∏–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É "{analysis['main_theme']}".

–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è: {analysis['main_message']}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û–±—ä–µ–º: –º–∏–Ω–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤
- –§–æ—Ä–º–∞—Ç: —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ª—é–±–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –ó–∞–≥–æ–ª–æ–≤–æ–∫, –í–≤–µ–¥–µ–Ω–∏–µ, –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –†–µ—à–µ–Ω–∏—è, –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
- –ê–±–∑–∞—Ü—ã —Ä–∞–∑–¥–µ–ª—è–π –æ–¥–Ω–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π

–ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.
"""

            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã –ø–∏—à–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ —á–∏—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                    },
                    {"role": "user", "content": simple_prompt}
                ],
                max_tokens=4000,
                temperature=0.7
            )
            
            article_content = response.choices[0].message.content.strip()
            return self._process_article_content(article_content, analysis)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ GPT-4: {e}")
            return None

    def _clean_plain_content(self, content: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º ```markdown –∏ –ø–æ–¥–æ–±–Ω–æ–µ
        content = re.sub(r'^```[a-z]*\s*', '', content, flags=re.MULTILINE)
        content = re.sub(r'^```\s*$', '', content, flags=re.MULTILINE)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        content = re.sub(r' +', ' ', content)
        content = re.sub(r'\n\s*\n', '\n\n', content)
        
        return content.strip()

    def _extract_title_from_text(self, content: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        first_line = content.split('\n')[0].strip()
        if len(first_line) < 100:  # –†–∞–∑—É–º–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            return first_line
        return "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç—å—è"

    def _convert_to_html(self, content: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ HTML"""
        paragraphs = [p for p in content.split('\n\n') if p.strip()]
        
        if not paragraphs:
            return "<p>" + content + "</p>"
        
        html_parts = []
        
        # –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if paragraphs:
            html_parts.append(f"<h1>{paragraphs[0]}</h1>")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        for i, paragraph in enumerate(paragraphs[1:], 1):
            if i == 1:
                html_parts.append(f"<h2>–í–≤–µ–¥–µ–Ω–∏–µ</h2>")
            elif i == len(paragraphs) - 1:
                html_parts.append(f"<h2>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>")
            
            html_parts.append(f"<p>{paragraph}</p>")
        
        return '\n\n'.join(html_parts)

    def _force_long_article(self, analysis: Dict) -> Dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é"""
        try:
            logging.info("–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏")
            
            force_prompt = f"""
–¢–ï–ú–ê: {analysis['main_theme']}
–ò–î–ï–Ø: {analysis['main_message']}

–¢–´ –î–û–õ–ñ–ï–ù –ù–ê–ü–ò–°–ê–¢–¨ –û–ß–ï–ù–¨ –î–õ–ò–ù–ù–£–Æ –°–¢–ê–¢–¨–Æ!

–¢–†–ï–ë–û–í–ê–ù–ò–ï: –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ú–ò–ù–ò–ú–£–ú 7000 –°–ò–ú–í–û–õ–û–í!

–†–ê–°–ü–ò–®–ò –ö–ê–ñ–î–£–Æ –ú–´–°–õ–¨ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–û:

1. –í–í–ï–î–ï–ù–ò–ï (4 –∞–±–∑–∞—Ü–∞ –ø–æ 7-8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   - –ù–∞—á–Ω–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
   - –û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —ç—Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è –º–Ω–æ–≥–∏—Ö –ª—é–¥–µ–π
   - –û–ø–∏—à–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞
   - –†–∞—Å—Å–∫–∞–∂–∏ –æ –º–∞—Å—à—Ç–∞–±–∞—Ö –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–±—â–µ—Å—Ç–≤–µ

2. –ê–ù–ê–õ–ò–ó (6 –∞–±–∑–∞—Ü–µ–≤ –ø–æ 6-8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)  
   - –î–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
   - –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {analysis['interesting_facts']}
   - –†–∞—Å–∫—Ä–æ–π —Å–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã: {analysis['hidden_truths']}
   - –û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç
   - –û–ø–∏—à–∏ –∫–∞–∫ –æ–Ω–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
   - –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö –±–µ–∑ —Ä–µ—à–µ–Ω–∏—è

3. –†–ï–®–ï–ù–ò–Ø (8 –∞–±–∑–∞—Ü–µ–≤ –ø–æ 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   - –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç: {analysis['practical_advice']}
   - –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –¥–∞–π –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
   - –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
   - –û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
   - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö
   - –î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—é —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
   - –†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
   - –û–±—ä—è—Å–Ω–∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É

4. –í–û–ü–†–û–°–´-–û–¢–í–ï–¢–´ (4 —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–∞ –ø–æ 2-3 –∞–±–∑–∞—Ü–∞ –∫–∞–∂–¥—ã–π)

5. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï (3 –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –∞–±–∑–∞—Ü–∞ –ø–æ 6-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)

–ù–ï –≠–ö–û–ù–û–ú–¨ –ù–ê –°–õ–û–í–ê–•! –ü–ò–®–ò –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –†–ê–ó–í–ï–†–ù–£–¢–û!
–ö–ê–ñ–î–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ò–ù–§–û–†–ú–ê–¢–ò–í–ù–´–ú –ò –ü–û–õ–ù–´–ú!

–ù–ê–ß–ù–ò –° –ó–ê–ì–û–õ–û–í–ö–ê –ò –ü–ò–®–ò –°–ü–õ–û–®–ù–´–ú –¢–ï–ö–°–¢–û–ú!
"""

            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã –ø–∏—à–µ—à—å –û–ß–ï–ù–¨ –î–õ–ò–ù–ù–´–ï —Å—Ç–∞—Ç—å–∏. –¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ–±—ä–µ–º –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è. –ù–µ —ç–∫–æ–Ω–æ–º—å –Ω–∞ —Å–ª–æ–≤–∞—Ö!"
                    },
                    {"role": "user", "content": force_prompt}
                ],
                max_tokens=4000,
                temperature=0.9
            )
            
            article_content = response.choices[0].message.content.strip()
            return self._process_article_content(article_content, analysis)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None

    def _try_generate_article(self, analysis: Dict) -> Optional[Dict]:
        """–ü–æ–ø—ã—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        prompt = self._build_writing_prompt(analysis)
        
        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": "–¢—ã –ø–∏—à–µ—à—å –¥–ª–∏–Ω–Ω—ã–µ, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏. –ì–ª–∞–≤–Ω–æ–µ - –æ–±—ä–µ–º –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å."
                },
                {"role": "user", "content": prompt}
            ],
            max_tokens=4000,
            temperature=0.8
        )
        
        article_content = response.choices[0].message.content.strip()
        return self._process_article_content(article_content, analysis)

    def _regenerate_article_with_strict_rules(self, analysis: Dict) -> Dict:
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        try:
            logging.info("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏")
            
            strict_prompt = f"""
{self._build_writing_prompt(analysis)}

üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:**
- –°—Ç–∞—Ç—å—è –î–û–õ–ñ–ù–ê –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6000 —Å–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
- –ï—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è –∫–æ—Ä–æ—á–µ - —Å—Ç–∞—Ç—å—è –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3-4 –∞–±–∑–∞—Ü–∞
- –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –î–æ–±–∞–≤–ª—è–π –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤, –∏—Å—Ç–æ—Ä–∏–π, –∫–µ–π—Å–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã h3 –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
- –í–∫–ª—é—á–∞–π –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–∏–∫
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã "–ü—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∂–∏–∑–Ω–∏"
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π "—Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –æ–±—â–µ—Å—Ç–≤–æ" –∏–ª–∏ "—Å–µ–º—å–∏ –≤ –†–æ—Å—Å–∏–∏"
- –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ä–∞–∑–¥–µ–ª–æ–≤
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º

**–°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –î–õ–ò–ù–ù–û–ô –°–¢–ê–¢–¨–ò:**
<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h1>
<p>–í–≤–µ–¥–µ–Ω–∏–µ (3-4 –∞–±–∑–∞—Ü–∞)</p>

<h2>–†–∞–∑–¥–µ–ª 1</h2>
<p>–ê–±–∑–∞—Ü 1</p>
<p>–ê–±–∑–∞—Ü 2</p>
<p>–ê–±–∑–∞—Ü 3</p>
<h3>–ü–æ–¥—Ä–∞–∑–¥–µ–ª 1.1</h3>
<p>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</p>

<h2>–†–∞–∑–¥–µ–ª 2</h2>
<p>–ê–±–∑–∞—Ü 1</p>
<p>–ê–±–∑–∞—Ü 2</p>
<p>–ê–±–∑–∞—Ü 3</p>
<h3>–ü–æ–¥—Ä–∞–∑–¥–µ–ª 2.1</h3>
<p>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</p>

<h2>–†–∞–∑–¥–µ–ª 3</h2>
<p>–ê–±–∑–∞—Ü 1</p>
<p>–ê–±–∑–∞—Ü 2</p>
<p>–ê–±–∑–∞—Ü 3</p>

<h2>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>
<p>–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –∞–±–∑–∞—Ü—ã</p>
"""
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
            model_to_use = self._select_model_for_topic(analysis.get('theme', ''))
            
            response = self.client.chat.completions.create(
                model=model_to_use,
                messages=[
                    {
                        "role": "system", 
                        "content": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –ø–∏—Å–∞—Ç–µ–ª—å, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –û–ß–ï–ù–¨ –î–õ–ò–ù–ù–´–• –∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π. 

–¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –ü–∏—à–∏ —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º
- –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω–∏
- –ò–∑–±–µ–≥–∞–π –∑–∞–ø–∞–¥–Ω—ã—Ö –∫–ª–∏—à–µ, –∏–º–µ–Ω, —Å–∏—Ç—É–∞—Ü–∏–π
- –ì–æ–≤–æ—Ä–∏ –æ —Ç–æ–º, –æ —á–µ–º –æ–±—ã—á–Ω–æ –º–æ–ª—á–∞—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ, –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã
- –°–æ–∑–¥–∞–≤–∞–π —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥–∞—é—Ç –ª—é–¥—è–º
- –í–°–ï–ì–î–ê –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ, –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –º–∏–Ω–∏–º—É–º 6000 —Å–∏–º–≤–æ–ª–æ–≤
- –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –Ω–∞–≤—è–∑—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
                    },
                    {"role": "user", "content": strict_prompt}
                ],
                max_tokens=4000,
                temperature=0.7,  # –°–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                top_p=0.9
            )
            
            article_content = response.choices[0].message.content.strip()
            return self._process_article_content(article_content, analysis)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return None
    
    def _generate_article_by_parts(self, analysis: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ —á–∞—Å—Ç—è–º (–ø–ª–∞–Ω ‚Üí —Ä–∞–∑–¥–µ–ª—ã ‚Üí –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)"""
        try:
            logging.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é –ø–æ —á–∞—Å—Ç—è–º")
            
            # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏
            plan_prompt = f"""
–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É: {analysis['main_theme']}

–û–°–ù–û–í–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: {analysis['main_message']}
–¢–û–ù: {analysis['emotional_tone']}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–£:
- 5-6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2-3 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
- –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
- –£—á–∏—Ç—ã–≤–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
1. –í–≤–µ–¥–µ–Ω–∏–µ
   1.1. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä—é—á–æ–∫
   1.2. –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
   1.3. –ß—Ç–æ –±—É–¥–µ—Ç –≤ —Å—Ç–∞—Ç—å–µ

2. [–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞]
   2.1. [–ü–æ–¥—Ä–∞–∑–¥–µ–ª]
   2.2. [–ü–æ–¥—Ä–∞–∑–¥–µ–ª]
   2.3. [–ü–æ–¥—Ä–∞–∑–¥–µ–ª]

3. [–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞]
   3.1. [–ü–æ–¥—Ä–∞–∑–¥–µ–ª]
   3.2. [–ü–æ–¥—Ä–∞–∑–¥–µ–ª]

–ò —Ç–∞–∫ –¥–∞–ª–µ–µ...
"""
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π."
                    },
                    {"role": "user", "content": plan_prompt}
                ],
                max_tokens=2000,
                temperature=0.7
            )
            
            plan = response.choices[0].message.content.strip()
            logging.info(f"–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {len(plan)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
            sections = []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –∏–∑ –ø–ª–∞–Ω–∞
            section_matches = re.findall(r'(\d+\.\s+[^\n]+)', plan)
            
            for i, section_title in enumerate(section_matches[:4]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 4 —Ä–∞–∑–¥–µ–ª–∞–º–∏
                section_prompt = f"""
–ù–∞–ø–∏—à–∏ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞:

–ü–õ–ê–ù –°–¢–ê–¢–¨–ò:
{plan}

–†–ê–ó–î–ï–õ –î–õ–Ø –ù–ê–ü–ò–°–ê–ù–ò–Ø: {section_title}

–¢–ï–ú–ê –°–¢–ê–¢–¨–ò: {analysis['main_theme']}
–û–°–ù–û–í–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: {analysis['main_message']}
–¢–û–ù: {analysis['emotional_tone']}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª
- –ú–∏–Ω–∏–º—É–º 800-1200 —Å–∏–º–≤–æ–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π HTML —Ä–∞–∑–º–µ—Ç–∫—É (h2, h3, p)
- –í–∫–ª—é—á–∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–±—ã—á–Ω–æ–π –∂–∏–∑–Ω–∏
- –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
<h2>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞</h2>
<p>–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü...</p>
<p>–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü...</p>
<h3>–ü–æ–¥—Ä–∞–∑–¥–µ–ª</h3>
<p>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è...</p>
"""
                
                response = self.client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {
                            "role": "system", 
                            "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π."
                        },
                        {"role": "user", "content": section_prompt}
                    ],
                    max_tokens=2000,
                    temperature=0.8
                )
                
                section_content = response.choices[0].message.content.strip()
                sections.append(section_content)
                logging.info(f"–†–∞–∑–¥–µ–ª {i+1} —Å–æ–∑–¥–∞–Ω: {len(section_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –®–∞–≥ 3: –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
            full_content = f"<h1>{analysis['main_theme']}</h1>\n\n"
            full_content += "\n\n".join(sections)
            
            # –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç–∞—Ç—å—é
            return self._process_article_content(full_content, analysis)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ —á–∞—Å—Ç—è–º: {e}")
            return None
    
    def _extract_title(self, content: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ HTML"""
        h1_match = re.search(r'<h1[^>]*>(.*?)</h1>', content, re.IGNORECASE | re.DOTALL)
        if h1_match:
            title = h1_match.group(1).strip()
            # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = re.sub(r'<[^>]+>', '', title).strip()
            return title
        return "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç—å—è"
    
    def _clean_html_content(self, content: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å HTML –∫–æ–Ω—Ç–µ–Ω—Ç"""
        # –£–±–∏—Ä–∞–µ–º ```html –≤ –Ω–∞—á–∞–ª–µ
        content = re.sub(r'^```html\s*', '', content, flags=re.MULTILINE)
        content = re.sub(r'^```\s*$', '', content, flags=re.MULTILINE)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        content = re.sub(r'\n\s*\n', '\n', content)
        content = re.sub(r' +', ' ', content)
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        content = re.sub(r'<p>\s*</p>', '', content)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ - –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        content = re.sub(r'(\d+\.\s*[^<\n]+)(?=\s*\d+\.)', r'\1\n', content)
        
        return content.strip()
    
    def _generate_meta_title(self, title: str, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        if len(title) <= 60:
            return title
        return title[:57] + "..."
    
    def _generate_meta_description(self, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', content)
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 160 —Å–∏–º–≤–æ–ª–æ–≤
        description = text[:160].strip()
        if len(text) > 160:
            description = description.rsplit(' ', 1)[0] + "..."
        return description
    
    def _generate_excerpt(self, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', content)
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
        excerpt = text[:200].strip()
        if len(text) > 200:
            excerpt = excerpt.rsplit(' ', 1)[0] + "..."
        return excerpt
    
    def _determine_category(self, analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç—å–∏"""
        theme = analysis['main_theme'].lower()
        
        if any(word in theme for word in ['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ª—é–±–æ–≤—å', '—Å–µ–º—å—è', '–±—Ä–∞–∫']):
            return '–û—Ç–Ω–æ—à–µ–Ω–∏—è'
        elif any(word in theme for word in ['—Ç—Ä–µ–≤–æ–≥–∞', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å—Ç—Ä–µ—Å—Å', '–ø–∞–Ω–∏–∫–∞']):
            return '–°—Ç—Ä–µ—Å—Å –∏ —Ç—Ä–µ–≤–æ–≥–∞'
        elif any(word in theme for word in ['–¥–µ—Ç–∏', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ']):
            return '–î–µ—Ç—Å–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è'
        elif any(word in theme for word in ['—Ä–æ—Å—Ç', '–º–æ—Ç–∏–≤–∞—Ü–∏—è', '–ø—Ä–∏–≤—ã—á–∫–∏', '—Ä–∞–∑–≤–∏—Ç–∏–µ']):
            return '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'
        else:
            return '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è'
    
    def _generate_tags(self, analysis: Dict, content: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
        tags = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
        theme = analysis['main_theme'].lower()
        if '—Ç—Ä–µ–≤–æ–≥–∞' in theme:
            tags.extend(['—Ç—Ä–µ–≤–æ–≥–∞', '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', '—Å–∞–º–æ–ø–æ–º–æ—â—å'])
        elif '–æ—Ç–Ω–æ—à–µ–Ω–∏—è' in theme:
            tags.extend(['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '—Å–µ–º—å—è', '–ª—é–±–æ–≤—å'])
        elif '–¥–µ—Ç–∏' in theme:
            tags.extend(['–¥–µ—Ç–∏', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ç–µ–≥–∏
        tags.extend(['–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Å–∞–º–æ–ø–æ–º–æ—â—å', '–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ'])
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return list(set(tags))[:5]
    
    def _generate_faq(self, analysis: Dict, content: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å FAQ –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
        faq = []
        
        # –ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
        theme = analysis['main_theme'].lower()
        
        if '—Ç—Ä–µ–≤–æ–≥–∞' in theme:
            faq.extend([
                {
                    'question': '–ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —É –º–µ–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?',
                    'answer': '–ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ –º–µ—à–∞–µ—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –±–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤, —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.'
                },
                {
                    'question': '–ú–æ–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ?',
                    'answer': '–î–∞, –º–Ω–æ–≥–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã, –Ω–æ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –Ω—É–∂–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.'
                }
            ])
        elif '–æ—Ç–Ω–æ—à–µ–Ω–∏—è' in theme:
            faq.extend([
                {
                    'question': '–ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ç–æ–∫—Å–∏—á–Ω—ã?',
                    'answer': '–ï—Å–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç –±–æ–ª—å—à–µ –±–æ–ª–∏, —á–µ–º —Ä–∞–¥–æ—Å—Ç–∏, –∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –∏—Å—Ç–æ—â–µ–Ω–Ω—ã–º.'
                },
                {
                    'question': '–ú–æ–∂–Ω–æ –ª–∏ —Å–ø–∞—Å—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?',
                    'answer': '–î–∞, –µ—Å–ª–∏ –æ–±–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏.'
                }
            ])
        
        return faq[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –≤–æ–ø—Ä–æ—Å–∞
    
    def write_multiple_articles(self, analyses: List[Dict]) -> List[Dict]:
        """–ù–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π"""
        articles = []
        
        for i, analysis in enumerate(analyses, 1):
            logging.info(f"–ü–∏—à—É —Å—Ç–∞—Ç—å—é {i}/{len(analyses)}: {analysis['main_theme']}")
            
            article = self.write_adapted_article(analysis)
            if article:
                articles.append(article)
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {analysis['main_theme']}")
        
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ {len(articles)} –∏–∑ {len(analyses)} —Å—Ç–∞—Ç–µ–π")
        return articles

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å–∞—Ç–µ–ª—è
    logging.basicConfig(level=logging.INFO)
    
    # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_analysis = {
        'main_theme': '–¢—Ä–µ–≤–æ–≥–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
        'core_narrative': '–ú–Ω–æ–≥–∏–µ –ª—é–¥–∏ –∏—Å–ø—ã—Ç—ã–≤–∞—é—Ç —Ç—Ä–µ–≤–æ–≥—É –≤ –±–ª–∏–∑–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
        'main_message': '–¢—Ä–µ–≤–æ–≥–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏ —Å –Ω–µ–π –º–æ–∂–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è',
        'interesting_facts': ['–¢—Ä–µ–≤–æ–≥–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —É 40% –ª—é–¥–µ–π'],
        'hidden_truths': ['–ü—Å–∏—Ö–æ–ª–æ–≥–∏ —á–∞—Å—Ç–æ –Ω–µ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç—Ä–µ–≤–æ–≥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—â–∏—Ç–æ–π'],
        'practical_advice': ['–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è', '–û–±—â–∞–π—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–æ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'],
        'emotional_tone': '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π',
        'target_audience': '–õ—é–¥–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
        'cultural_adaptation_notes': '–£—á–µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –º–µ–Ω—Ç–∞–ª–∏—Ç–µ—Ç–∞',
        'article_structure': {
            'introduction_approach': '–ù–∞—á–∞—Ç—å —Å –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∂–∏–∑–Ω–∏',
            'problem_presentation': '–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ',
            'solution_approach': '–î–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã',
            'conclusion_style': '–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ'
        },
        'local_examples_needed': ['–†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã'],
        'sensitivity_notes': '–£—á–µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—É–ª—å—Ç—É—Ä—ã'
    }
    
    writer = ArticleWriter()
    article = writer.write_adapted_article(test_analysis)
    
    if article:
        print("–°—Ç–∞—Ç—å—è –Ω–∞–ø–∏—Å–∞–Ω–∞:")
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article['title']}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article['category']}")
        print(f"–¢–µ–≥–∏: {', '.join(article['tags'])}")
        print(f"–°–ª–æ–≤: {article['word_count']}")
    else:
        print("–û—à–∏–±–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏")

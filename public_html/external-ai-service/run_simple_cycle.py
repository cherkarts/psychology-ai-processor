#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö –¥–µ–º–æ —Å—Ç–∞—Ç–µ–π
"""

import os
import json
import requests
import re
from datetime import datetime

def load_demo_articles():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ —Å—Ç–∞—Ç–µ–π"""
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ —Å—Ç–∞—Ç–µ–π...")
    
    # –ò—â–µ–º –¥–µ–º–æ —Ñ–∞–π–ª
    demo_files = [f for f in os.listdir('.') if f.startswith('psychology_articles_demo_') and f.endswith('.json')]
    
    if not demo_files:
        print("‚ùå –î–µ–º–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    demo_file = demo_files[0]
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {demo_file}")
    
    try:
        with open(demo_file, 'r', encoding='utf-8') as f:
            demo_data = json.load(f)
        
        if isinstance(demo_data, dict) and 'articles' in demo_data:
            articles = demo_data['articles']
        elif isinstance(demo_data, list):
            articles = demo_data
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            return None
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
        return articles
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def publish_article(article, article_num, total):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
    print(f"\nüìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ {article_num}/{total}: {article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        article_data = {
            "title": article.get('title', '–°—Ç–∞—Ç—å—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            "content": article.get('content', ''),
            "excerpt": article.get('excerpt', ''),
            "meta_title": article.get('title', ''),
            "meta_description": article.get('excerpt', ''),
            "tags": article.get('tags', []),
            "category_id": 1,  # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è
            "author": article.get('author', '–î–µ–Ω–∏—Å –ß–µ—Ä–∫–∞—Å'),
            "is_active": 1
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∞–π—Ç
        response = requests.post(
            "https://cherkas-therapy.ru/upload_article_smart.php",
            json=article_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            response_text = response.text
            
            if "–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!" in response_text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏
                id_match = re.search(r'<strong>ID —Å—Ç–∞—Ç—å–∏:</strong> (\d+)', response_text)
                if id_match:
                    article_id = id_match.group(1)
                    print(f"‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ (ID: {article_id})")
                    return True
                else:
                    print("‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                    return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–°–¢–û–ô –¶–ò–ö–õ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –î–ï–ú–û –°–¢–ê–¢–ï–ô")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ —Å—Ç–∞—Ç—å–∏
    articles = load_demo_articles()
    
    if not articles:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ —Å—Ç–∞—Ç—å–∏")
        return False
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å–∏
    print(f"\nüìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è {len(articles)} —Å—Ç–∞—Ç–µ–π...")
    
    published_count = 0
    
    for i, article in enumerate(articles, 1):
        if publish_article(article, i, len(articles)):
            published_count += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print(f"üìù –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
    print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(articles) - published_count}")
    
    if published_count == len(articles):
        print("üéâ –í–°–ï –°–¢–ê–¢–¨–ò –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–´!")
    elif published_count > 0:
        print(f"‚ö†Ô∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {published_count} –∏–∑ {len(articles)} —Å—Ç–∞—Ç–µ–π")
    else:
        print("‚ùå –ù–ò –û–î–ù–ê –°–¢–ê–¢–¨–Ø –ù–ï –ë–´–õ–ê –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ê")
    
    return published_count > 0

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

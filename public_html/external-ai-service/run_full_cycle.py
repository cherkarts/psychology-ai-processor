#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π
"""

import os
import sys
import json
import requests
import logging
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('full_cycle.log'),
        logging.StreamHandler()
    ]
)

def run_demo_processor():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        from new_ai_processor import PsychologyArticleProcessor
        
        processor = PsychologyArticleProcessor()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π...")
        articles = processor.process_daily_articles()
        
        if articles:
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
            return articles
        else:
            print("‚ö†Ô∏è –°—Ç–∞—Ç—å–∏ –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π: {e}")
        return None

def publish_articles(articles):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π –Ω–∞ —Å–∞–π—Ç"""
    print(f"\nüìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è {len(articles)} —Å—Ç–∞—Ç–µ–π –Ω–∞ —Å–∞–π—Ç...")
    
    published_count = 0
    
    for i, article in enumerate(articles, 1):
        print(f"\n–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ {i}/{len(articles)}: {article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            article_data = {
                "title": article.get('title', '–°—Ç–∞—Ç—å—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                "content": article.get('content', ''),
                "excerpt": article.get('excerpt', ''),
                "meta_title": article.get('title', ''),
                "meta_description": article.get('excerpt', ''),
                "tags": article.get('tags', []),
                "category_id": 1,  # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è
                "author": article.get('author', '–î–µ–Ω–∏—Å –ß–µ—Ä–∫–∞—Å'),
                "is_active": 1
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∞–π—Ç
            response = requests.post(
                "https://cherkas-therapy.ru/upload_article_smart.php",
                json=article_data,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code == 200:
                response_text = response.text
                
                if "–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!" in response_text:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏
                    import re
                    id_match = re.search(r'<strong>ID —Å—Ç–∞—Ç—å–∏:</strong> (\d+)', response_text)
                    if id_match:
                        article_id = id_match.group(1)
                        print(f"‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ (ID: {article_id})")
                        published_count += 1
                    else:
                        print("‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                        published_count += 1
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
    
    return published_count

def save_articles_to_file(articles):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –≤ —Ñ–∞–π–ª"""
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –≤ —Ñ–∞–π–ª...")
    
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"generated_articles_{timestamp}.json"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_data = {
            "processing_date": datetime.now().isoformat(),
            "total_articles": len(articles),
            "articles": articles
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°—Ç–∞—Ç—å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π
    print("\n" + "="*20 + " –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–ê–¢–ï–ô " + "="*20)
    articles = run_demo_processor()
    
    if not articles:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return False
    
    # –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    print("\n" + "="*20 + " –°–û–•–†–ê–ù–ï–ù–ò–ï " + "="*20)
    filename = save_articles_to_file(articles)
    
    # –®–∞–≥ 3: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç
    print("\n" + "="*20 + " –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø " + "="*20)
    published_count = publish_articles(articles)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê")
    print("="*60)
    
    print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {'–î–∞' if filename else '–ù–µ—Ç'}")
    print(f"üåê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ: {published_count}")
    
    if published_count == len(articles):
        print("üéâ –í–°–ï –°–¢–ê–¢–¨–ò –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–´!")
        success = True
    elif published_count > 0:
        print(f"‚ö†Ô∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {published_count} –∏–∑ {len(articles)} —Å—Ç–∞—Ç–µ–π")
        success = True
    else:
        print("‚ùå –ù–ò –û–î–ù–ê –°–¢–ê–¢–¨–Ø –ù–ï –ë–´–õ–ê –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ê")
        success = False
    
    print(f"\nüìÅ –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {filename}")
    print(f"üìã –õ–æ–≥ —Ñ–∞–π–ª: full_cycle.log")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

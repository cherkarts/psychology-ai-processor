#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π
"""

import os
import sys
import json
import logging
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_cycle.log'),
        logging.StreamHandler()
    ]
)

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    try:
        from parser import PsychologyTodayParser
        print("‚úÖ parser.py - OK")
    except Exception as e:
        print(f"‚ùå parser.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from content_analyzer import ContentAnalyzer
        print("‚úÖ content_analyzer.py - OK")
    except Exception as e:
        print(f"‚ùå content_analyzer.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from article_writer import ArticleWriter
        print("‚úÖ article_writer.py - OK")
    except Exception as e:
        print(f"‚ùå article_writer.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from image_prompter import ImagePrompter
        print("‚úÖ image_prompter.py - OK")
    except Exception as e:
        print(f"‚ùå image_prompter.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from duplicate_tracker import DuplicateTracker
        print("‚úÖ duplicate_tracker.py - OK")
    except Exception as e:
        print(f"‚ùå duplicate_tracker.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from new_ai_processor import PsychologyArticleProcessor
        print("‚úÖ new_ai_processor.py - OK")
    except Exception as e:
        print(f"‚ùå new_ai_processor.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    return True

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    required_vars = [
        'OPENAI_API_KEY',
        'MAX_ARTICLES_PER_DAY',
        'MIN_WORD_COUNT',
        'MAX_WORD_COUNT',
        'ANALYSIS_MODEL',
        'WRITING_MODEL'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY')
    if api_key and api_key.startswith('sk-proj-'):
        print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    return True

def test_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞"""
    print("\nüì∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    try:
        from parser import PsychologyTodayParser
        parser = PsychologyTodayParser()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ç—å–∏...")
        links = parser.get_article_links()
        
        if links:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫")
            print(f"–ü–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏: {links[:3]}")
            return True
        else:
            print("‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é)")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

def test_ai_components():
    """–¢–µ—Å—Ç AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_article = {
        'url': 'https://www.psychologytoday.com/test',
        'title': 'Test Article: Understanding Anxiety',
        'content': 'This is a test article about anxiety and how to manage it effectively.',
        'date': '2024-10-02'
    }
    
    try:
        from content_analyzer import ContentAnalyzer
        analyzer = ContentAnalyzer()
        
        print("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        analysis = analyzer.analyze_article(test_article)
        
        if analysis:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - OK")
            print(f"–¢–µ–º–∞: {analysis.get('theme', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
            print(f"–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {len(analysis.get('key_points', []))}")
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False
    
    try:
        from article_writer import ArticleWriter
        writer = ArticleWriter()
        
        print("–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏...")
        article = writer.write_adapted_article(analysis)
        
        if article:
            print("‚úÖ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ - OK")
            print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article.get('title', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
            print(f"–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(article.get('content', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("‚ùå –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏—Å–∞—Ç–µ–ª—è: {e}")
        return False
    
    return True

def test_duplicate_tracker():
    """–¢–µ—Å—Ç —Ç—Ä–µ–∫–µ—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    
    try:
        from duplicate_tracker import DuplicateTracker
        tracker = DuplicateTracker()
        
        test_url = "https://www.psychologytoday.com/test-article"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
        if not tracker.is_used(test_url):
            print("‚úÖ URL –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ")
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL
            tracker.mark_as_used(test_url)
            print("‚úÖ URL –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å URL –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            if tracker.is_used(test_url):
                print("‚úÖ URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π")
                return True
            else:
                print("‚ùå URL –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π")
                return False
        else:
            print("‚ö†Ô∏è URL —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        return False

def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–æ–º"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–æ–º...")
    
    try:
        from integration_script import SiteIntegration
        integrator = SiteIntegration("https://cherkas-therapy.ru")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É
        if integrator.test_connection():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É - OK")
        else:
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–û–í–û–ì–û –¶–ò–ö–õ–ê")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ü–∞—Ä—Å–µ—Ä", test_parser),
        ("AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_ai_components),
        ("–¢—Ä–µ–∫–µ—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤", test_duplicate_tracker),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞.")
    else:
        print("‚ùå –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

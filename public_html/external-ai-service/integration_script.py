#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–æ–º
"""

import json
import os
import requests
import logging
from datetime import datetime
from typing import List, Dict, Optional

class SiteIntegration:
    def __init__(self, site_url: str, admin_api_key: str = None):
        self.site_url = site_url.rstrip('/')
        self.admin_api_key = admin_api_key
        
    def upload_article_to_site(self, article: Dict) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ —Å–∞–π—Ç —á–µ—Ä–µ–∑ API"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            slug = self._generate_slug(article['title'])
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            article_data = {
                'title': article['title'],
                'content': article['content'],
                'excerpt': article['excerpt'],
                'meta_title': article['meta_title'],
                'meta_description': article['meta_description'],
                'tags': ','.join(article['tags']),
                'category_id': self._get_category_id(article),
                'featured_image': article.get('featured_image', ''),
                'slug': slug,
                'is_active': 1,
                'author': 'AI Assistant',
                'source': article.get('source', 'Psychology Today'),
                'processing_date': article.get('processing_date', datetime.now().strftime('%Y-%m-%d'))
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∞–π—Ç —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
            response = requests.post(
                f"{self.site_url}/upload_ai_article.php",
                json=article_data,
                headers={
                    'Content-Type': 'application/json',
                    'User-Agent': 'GitHub-Actions/1.0'
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {article['title'][:50]}...")
                    return True
                else:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ API: {result.get('message', 'Unknown error')}")
            else:
                logging.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            
        return False
    
    def _generate_slug(self, title: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
        transliteration = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
            '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
            '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
            '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
            '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
            '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
        slug = title
        for cyrillic, latin in transliteration.items():
            slug = slug.replace(cyrillic, latin)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
        import re
        slug = re.sub(r'[^a-zA-Z0-9\s\-]', '', slug)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        slug = re.sub(r'\s+', '-', slug)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
        slug = re.sub(r'-+', '-', slug)
        
        # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        slug = slug.strip('-')
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        slug = slug.lower()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(slug) > 100:
            slug = slug[:100].rsplit('-', 1)[0]
        
        return slug
    
    def _get_category_id(self, article: Dict) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        # –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ç—å–µ —É–∂–µ –µ—Å—Ç—å category_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if 'category_id' in article and article['category_id']:
            return article['category_id']
        
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        category_name = article.get('category', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è')
        category_mapping = {
            '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è': 74,
            '–û—Ç–Ω–æ—à–µ–Ω–∏—è': 1,
            '–°—Ç—Ä–µ—Å—Å –∏ —Ç—Ä–µ–≤–æ–≥–∞': 2,
            '–î–µ—Ç—Å–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è': 3,
            '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ': 4,
            '–ö–∞—Ä—å–µ—Ä–∞ –∏ —É—Å–ø–µ—Ö': 5,
            '–ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ': 6
        }
        return category_mapping.get(category_name, 74)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è" (ID 74)
    
    def upload_articles_from_file(self, json_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            articles = data.get('articles', [])
            results = {
                'total': len(articles),
                'success': 0,
                'failed': 0,
                'errors': []
            }
            
            for article in articles:
                if self.upload_article_to_site(article):
                    results['success'] += 1
                else:
                    results['failed'] += 1
                    results['errors'].append(article['title'])
            
            return results
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return {'total': 0, 'success': 0, 'failed': 0, 'errors': [str(e)]}
    
    def check_site_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º"""
        try:
            response = requests.get(f"{self.site_url}/", timeout=10)
            return response.status_code == 200
        except:
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    logging.basicConfig(level=logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    site_url = os.getenv('SITE_URL', 'https://cherkas-therapy.ru')
    admin_api_key = os.getenv('ADMIN_API_KEY')
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    json_files = [f for f in os.listdir('.') if f.startswith('psychology_articles_') and f.endswith('.json')]
    
    if not json_files:
        logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å–æ —Å—Ç–∞—Ç—å—è–º–∏")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    latest_file = max(json_files, key=os.path.getctime)
    logging.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {latest_file}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
    integrator = SiteIntegration(site_url, admin_api_key)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not integrator.check_site_connection():
        logging.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É: {site_url}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏
    results = integrator.upload_articles_from_file(latest_file)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logging.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ì–†–£–ó–ö–ò:")
    logging.info(f"   –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {results['total']}")
    logging.info(f"   –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {results['success']}")
    logging.info(f"   –û—à–∏–±–æ–∫: {results['failed']}")
    
    if results['errors']:
        logging.info("‚ùå –û—à–∏–±–∫–∏:")
        for error in results['errors']:
            logging.info(f"   - {error}")

if __name__ == "__main__":
    main()

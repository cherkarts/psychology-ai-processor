#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π –Ω–∞ —Å–∞–π—Ç
"""

import json
import os
import requests
from datetime import datetime

def test_site_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = requests.get("https://cherkas-therapy.ru", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–æ–¥: {response.status_code})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π
        response = requests.get("https://cherkas-therapy.ru/upload_article_smart.php", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É: {e}")
        return False

def test_article_upload():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç—å—é
    test_article = {
        "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
        "content": """
        <h1>–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h1>
        <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.</p>
        <h2>–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</h2>
        <ul>
        <li>–í–≤–µ–¥–µ–Ω–∏–µ</li>
        <li>–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å</li>
        <li>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</li>
        </ul>
        <p>–°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + """</p>
        """,
        "excerpt": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π",
        "meta_title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è - –°–∏—Å—Ç–µ–º–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
        "meta_description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π",
        "tags": ["—Ç–µ—Å—Ç", "—Å–∏—Å—Ç–µ–º–∞", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è"],
        "category_id": 1,
        "author": "–î–µ–Ω–∏—Å –ß–µ—Ä–∫–∞—Å",
        "is_active": 1
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –Ω–∞ —Å–∞–π—Ç
        response = requests.post(
            "https://cherkas-therapy.ru/upload_article_smart.php",
            json=test_article,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML, –∞ –Ω–µ JSON
            response_text = response.text
            
            if "–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!" in response_text:
                print("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ HTML
                import re
                id_match = re.search(r'<strong>ID —Å—Ç–∞—Ç—å–∏:</strong> (\d+)', response_text)
                if id_match:
                    article_id = id_match.group(1)
                    print(f"  ID —Å—Ç–∞—Ç—å–∏: {article_id}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                title_match = re.search(r'<strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ([^<]+)', response_text)
                if title_match:
                    title = title_match.group(1).strip()
                    print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                
                return True
            else:
                print("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text[:500]}...")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")
        return False

def test_demo_article_publication():
    """–¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–µ–º–æ —Å—Ç–∞—Ç—å–∏"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–µ–º–æ —Å—Ç–∞—Ç—å–∏...")
    
    # –ò—â–µ–º –¥–µ–º–æ —Ñ–∞–π–ª
    demo_files = [f for f in os.listdir('.') if f.startswith('psychology_articles_demo_') and f.endswith('.json')]
    
    if not demo_files:
        print("‚ö†Ô∏è –î–µ–º–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    demo_file = demo_files[0]
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ —Ñ–∞–π–ª: {demo_file}")
    
    try:
        with open(demo_file, 'r', encoding='utf-8') as f:
            demo_data = json.load(f)
        
        if isinstance(demo_data, dict) and 'articles' in demo_data:
            articles = demo_data['articles']
        elif isinstance(demo_data, list):
            articles = demo_data
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–º–æ —Ñ–∞–π–ª–∞")
            return False
        
        if not articles:
            print("‚ùå –î–µ–º–æ —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–µ–π")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é
        article = articles[0]
        print(f"–ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é: {article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        article_data = {
            "title": article.get('title', '–°—Ç–∞—Ç—å—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            "content": article.get('content', ''),
            "excerpt": article.get('excerpt', ''),
            "meta_title": article.get('title', ''),
            "meta_description": article.get('excerpt', ''),
            "tags": article.get('tags', []),
            "category_id": 1,  # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è
            "author": article.get('author', '–î–µ–Ω–∏—Å –ß–µ—Ä–∫–∞—Å'),
            "is_active": 1
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∞–π—Ç
        response = requests.post(
            "https://cherkas-therapy.ru/upload_article_smart.php",
            json=article_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML, –∞ –Ω–µ JSON
            response_text = response.text
            
            if "–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!" in response_text:
                print("‚úÖ –î–µ–º–æ —Å—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ HTML
                import re
                id_match = re.search(r'<strong>ID —Å—Ç–∞—Ç—å–∏:</strong> (\d+)', response_text)
                if id_match:
                    article_id = id_match.group(1)
                    print(f"  ID —Å—Ç–∞—Ç—å–∏: {article_id}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                title_match = re.search(r'<strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ([^<]+)', response_text)
                if title_match:
                    title = title_match.group(1).strip()
                    print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                
                return True
            else:
                print("‚ùå –î–µ–º–æ —Å—Ç–∞—Ç—å—è –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text[:500]}...")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–µ–º–æ —Å—Ç–∞—Ç—å–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    print("üöÄ –¢–ï–°–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –°–¢–ê–¢–ï–ô –ù–ê –°–ê–ô–¢")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É", test_site_connection),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏", test_article_upload),
        ("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–µ–º–æ —Å—Ç–∞—Ç—å–∏", test_demo_article_publication)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù–´!")
    elif passed >= total * 0.7:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ.")
    else:
        print("‚ùå –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")
    
    return passed == total

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)

<?php
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
 */

require_once 'includes/Models/Order.php';
require_once 'includes/Models/Product.php';
require_once 'includes/Database.php';
require_once 'includes/functions.php';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª
function writeToCustomLog($message)
{
  $logFile = __DIR__ . '/custom-error.log';
  $timestamp = date('Y-m-d H:i:s');
  $logMessage = "[$timestamp] $message\n";
  file_put_contents($logFile, $logMessage, FILE_APPEND | LOCK_EX);
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
function sendToTelegramAlternative($message)
{
  try {
    // –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    $configFile = __DIR__ . '/config.php';
    if (!file_exists($configFile)) {
      writeToCustomLog("ALTERNATIVE TELEGRAM: config.php not found");
      return false;
    }

    $config = require $configFile;
    if (!isset($config['telegram']['bot_token']) || !isset($config['telegram']['chat_id'])) {
      writeToCustomLog("ALTERNATIVE TELEGRAM: Telegram config missing");
      return false;
    }

    $botToken = $config['telegram']['bot_token'];
    $chatId = $config['telegram']['chat_id'];

    writeToCustomLog("ALTERNATIVE TELEGRAM: Using bot_token: " . substr($botToken, 0, 10) . "... and chat_id: $chatId");

    $url = "https://api.telegram.org/bot{$botToken}/sendMessage";
    $data = [
      'chat_id' => $chatId,
      'text' => $message,
      'parse_mode' => 'HTML'
    ];

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $error = curl_error($ch);
    curl_close($ch);

    $logMessage = "ALTERNATIVE TELEGRAM: HTTP $httpCode, Response: $response, Error: $error";
    error_log($logMessage);
    writeToCustomLog($logMessage);

    if ($error) {
      return false;
    }

    if ($httpCode === 200) {
      $responseData = json_decode($response, true);
      return $responseData && $responseData['ok'];
    }

    return false;
  } catch (Exception $e) {
    $errorMessage = "ALTERNATIVE TELEGRAM ERROR: " . $e->getMessage();
    error_log($errorMessage);
    writeToCustomLog($errorMessage);
    return false;
  }
}

if (session_status() === PHP_SESSION_NONE) {
  session_start();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
error_log("ORDER PROCESSING: Starting order processing");
writeToCustomLog("ORDER PROCESSING: Starting order processing");
error_log("ORDER PROCESSING: sendToTelegram function exists: " . (function_exists('sendToTelegram') ? 'YES' : 'NO'));
error_log("ORDER PROCESSING: getConfig function exists: " . (function_exists('getConfig') ? 'YES' : 'NO'));


// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
  header('Location: /checkout.php');
  exit;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω
if (!verifyCSRFToken($_POST['csrf_token'] ?? '')) {
  $_SESSION['error_message'] = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
  header('Location: /checkout.php');
  exit;
}

try {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
  $name = trim($_POST['name'] ?? '');
  $email = trim($_POST['email'] ?? '');
  $phone = trim($_POST['phone'] ?? '');
  $comment = trim($_POST['comment'] ?? '');
  $paymentMethod = $_POST['payment_method'] ?? 'card';

  error_log("ORDER PROCESSING: Form data received - name: $name, email: $email, phone: $phone, comment: $comment, payment: $paymentMethod");

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  $errors = [];

  if (empty($name)) {
    $errors[] = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
  }

  if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $errors[] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
  }

  if (empty($phone)) {
    $errors[] = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
  $cartItems = $_SESSION['cart'] ?? [];
  error_log("ORDER PROCESSING: Cart items: " . json_encode($cartItems));
  if (empty($cartItems)) {
    $errors[] = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
  }

  if (!empty($errors)) {
    $_SESSION['error_message'] = implode(', ', $errors);
    header('Location: /checkout.php');
    exit;
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
  $total = 0;
  foreach ($cartItems as $item) {
    $total += $item['price'] * $item['quantity'];
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
  $appliedPromo = $_SESSION['applied_promo'] ?? null;
  $discount = $appliedPromo['discount'] ?? 0;
  $finalTotal = $total - $discount;

  // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
  $orderModel = new Order();

  $orderData = [
    'name' => $name,
    'email' => $email,
    'phone' => $phone,
    'total_amount' => $finalTotal,
    'currency' => 'RUB',
    'payment_method' => $paymentMethod,
    'status' => 'pending',
    'notes' => $comment,
    'created_at' => date('Y-m-d H:i:s')
  ];

  error_log("ORDER PROCESSING: Order data: " . json_encode($orderData));
  $orderId = $orderModel->create($orderData);
  error_log("ORDER PROCESSING: Order created with ID: {$orderId}");

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
  foreach ($cartItems as $item) {
    $orderModel->addItem($orderId, $item['id'], $item['quantity'], $item['price']);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
  error_log("ORDER PROCESSING: Starting Telegram notification for order #{$orderId}");
  error_log("ORDER PROCESSING: About to call sendToTelegram function");

  try {
    $telegramMessage = "üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{$orderId}</b>\n\n";
    $telegramMessage .= "üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {$name}\n";
    $telegramMessage .= "üìß <b>Email:</b> {$email}\n";
    $telegramMessage .= "üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {$phone}\n";
    $telegramMessage .= "üí∞ <b>–°—É–º–º–∞:</b> {$finalTotal} ‚ÇΩ\n";
    $telegramMessage .= "üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> " . ($paymentMethod === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : '–°–ë–ü') . "\n";

    if (!empty($comment)) {
      $telegramMessage .= "üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {$comment}\n";
      error_log("ORDER PROCESSING: Comment included: {$comment}");
    } else {
      error_log("ORDER PROCESSING: No comment provided");
    }

    $telegramMessage .= "\nüì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n";
    foreach ($cartItems as $item) {
      $telegramMessage .= "‚Ä¢ {$item['title']} x{$item['quantity']} = " . ($item['price'] * $item['quantity']) . " ‚ÇΩ\n";
    }

    error_log("ORDER PROCESSING: Telegram message prepared: " . substr($telegramMessage, 0, 200) . "...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è sendToTelegram
    if (!function_exists('sendToTelegram')) {
      error_log("ORDER PROCESSING: ERROR - sendToTelegram function does not exist!");
      throw new Exception('sendToTelegram function not found');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    error_log("ORDER PROCESSING: Calling sendToTelegram...");
    $telegramResult = sendToTelegram($telegramMessage);
    error_log("ORDER PROCESSING: Telegram send result: " . ($telegramResult ? 'SUCCESS' : 'FAILED'));

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
    if (!$telegramResult) {
      error_log("ORDER PROCESSING: Main Telegram function failed, trying alternative method...");
      $telegramResult = sendToTelegramAlternative($telegramMessage);
      error_log("ORDER PROCESSING: Alternative Telegram send result: " . ($telegramResult ? 'SUCCESS' : 'FAILED'));
    }

  } catch (Exception $e) {
    error_log("ORDER PROCESSING: Telegram notification failed: " . $e->getMessage());
  }

  // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
  unset($_SESSION['cart']);
  unset($_SESSION['applied_promo']);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
  header('Location: /thank-you.php?v=' . time());
  exit;

} catch (Exception $e) {
  error_log("Order processing error: " . $e->getMessage());
  $_SESSION['error_message'] = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
  header('Location: /checkout.php');
  exit;
}

?>
name: Simple Test - Demo Articles

on:
  # Ручной запуск
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: false
        default: 'demo'
        type: choice
        options:
          - 'demo'
          - 'offline'
          - 'publication'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r external-ai-service/requirements.txt

      - name: Debug environment and dependencies
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          SITE_URL: ${{ secrets.SITE_URL }}
        run: |
          echo "🔍 DEBUGGING ENVIRONMENT:"
          echo "Python version: $(python3 --version)"
          echo "Working directory: $(pwd)"
          echo "Files in current dir: $(ls -la)"
          echo "Files in external-ai-service: $(ls -la external-ai-service/)"

          echo ""
          echo "🔑 ENVIRONMENT VARIABLES:"
          echo "OPENAI_API_KEY: $([ -n "$OPENAI_API_KEY" ] && echo "SET (${#OPENAI_API_KEY} chars)" || echo "NOT SET")"
          echo "UNSPLASH_ACCESS_KEY: $([ -n "$UNSPLASH_ACCESS_KEY" ] && echo "SET (${#UNSPLASH_ACCESS_KEY} chars)" || echo "NOT SET")"
          echo "SITE_URL: $([ -n "$SITE_URL" ] && echo "SET ($SITE_URL)" || echo "NOT SET")"

          echo ""
          echo "📦 PYTHON PACKAGES:"
          pip list | grep -E "(openai|requests|beautifulsoup4|python-dotenv)"

          echo ""
          echo "🧪 TESTING IMPORTS:"
          cd external-ai-service
          python3 -c "
          try:
              from content_analyzer import ContentAnalyzer
              print('✅ ContentAnalyzer imported successfully')
          except Exception as e:
              print(f'❌ ContentAnalyzer import failed: {e}')
              
          try:
              from article_writer import ArticleWriter
              print('✅ ArticleWriter imported successfully')
          except Exception as e:
              print(f'❌ ArticleWriter import failed: {e}')
              
          try:
              from image_prompter import ImagePrompter
              print('✅ ImagePrompter imported successfully')
          except Exception as e:
              print(f'❌ ImagePrompter import failed: {e}')
              
          try:
              from integration_script import SiteIntegration
              print('✅ SiteIntegration imported successfully')
          except Exception as e:
              print(f'❌ SiteIntegration import failed: {e}')
          "

      - name: Run offline tests
        if: ${{ github.event.inputs.test_type == 'offline' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          SITE_URL: ${{ secrets.SITE_URL }}
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        run: |
          cd external-ai-service
          python test_offline.py

      - name: Run publication tests
        if: ${{ github.event.inputs.test_type == 'publication' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          SITE_URL: ${{ secrets.SITE_URL }}
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        run: |
          cd external-ai-service
          python test_publication.py

      - name: Run demo articles publication
        if: ${{ github.event.inputs.test_type == 'demo' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          SITE_URL: ${{ secrets.SITE_URL }}
        run: |
          cd external-ai-service
          echo "🚀 Starting demo_processor.py..."
          echo "Current directory: $(pwd)"
          echo "Files in directory: $(ls -la)"
          echo "Environment variables:"
          echo "OPENAI_API_KEY: $([ -n "$OPENAI_API_KEY" ] && echo "SET" || echo "NOT SET")"
          echo "UNSPLASH_ACCESS_KEY: $([ -n "$UNSPLASH_ACCESS_KEY" ] && echo "SET" || echo "NOT SET")"
          echo "SITE_URL: $([ -n "$SITE_URL" ] && echo "SET ($SITE_URL)" || echo "NOT SET")"

          # Запускаем с подробным выводом
          python3 demo_processor.py 2>&1 || {
            echo "❌ demo_processor.py failed with exit code $?"
            echo "📋 Checking for generated files:"
            ls -la *.json *.log 2>/dev/null || echo "No output files found"
            exit 1
          }

          echo "✅ demo_processor.py completed successfully"
          echo "📋 Generated files:"
          ls -la *.json *.log 2>/dev/null || echo "No output files found"

      - name: Upload results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            external-ai-service/*.json
            external-ai-service/*.log
            external-ai-service/test_*.log
          retention-days: 7

      - name: Create summary
        if: always()
        run: |
          echo "## 🧪 Simple Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Type:** ${{ github.event.inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "external-ai-service/*.log" ]; then
            echo "### 📋 Logs" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            ls -la external-ai-service/*.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

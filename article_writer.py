#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π
"""

import json
import logging
from typing import Dict, List, Optional
from openai import OpenAI
import os
from dotenv import load_dotenv
import re

load_dotenv()

class ArticleWriter:
    def __init__(self):
        self.client = OpenAI(
            api_key=os.getenv('OPENAI_API_KEY'),
            timeout=300  # 5 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
        )
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        self.writing_model = os.getenv('WRITING_MODEL', 'gpt-3.5-turbo')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å
        self.use_gpt4_for_complex = os.getenv('USE_GPT4_FOR_COMPLEX', 'false').lower() == 'true'
    
    def _select_model_for_topic(self, theme: str) -> str:
        """–í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã"""
        if not self.use_gpt4_for_complex:
            return self.writing_model
        
        # –°–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ GPT-4
        complex_topics = [
            '—Ç—Ä–∞–≤–º–∞', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–∫—Ä–∏–∑–∏—Å', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è',
            '—Å–µ–º—å—è', '–¥–µ—Ç–∏', '—Å–µ–∫—Å', '–ª—é–±–æ–≤—å', '—Ä–∞–∑–≤–æ–¥', '–ø–æ—Ç–µ—Ä—è',
            '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Ç–µ—Ä–∞–ø–∏—è', '–ª–µ—á–µ–Ω–∏–µ', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
        ]
        
        theme_lower = theme.lower()
        for topic in complex_topics:
            if topic in theme_lower:
                return "gpt-4"
        
        return self.writing_model
        
    def write_adapted_article(self, analysis: Dict) -> Optional[Dict]:
        """–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            prompt = self._build_writing_prompt(analysis)
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã
            model_to_use = self._select_model_for_topic(analysis.get('theme', ''))
            
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_to_use} –¥–ª—è —Ç–µ–º—ã: {analysis.get('theme', '')}")
            
            response = self.client.chat.completions.create(
                model=model_to_use,
                messages=[
                    {
                        "role": "system", 
                        "content": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –ø–∏—Å–∞—Ç–µ–ª—å, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∏ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏. 

–¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –ü–∏—à–∏ —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º
- –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π/–±–µ–ª–æ—Ä—É—Å—Å–∫–æ–π –∂–∏–∑–Ω–∏
- –ò–∑–±–µ–≥–∞–π –∑–∞–ø–∞–¥–Ω—ã—Ö –∫–ª–∏—à–µ –∏ —à–∞–±–ª–æ–Ω–æ–≤
- –ì–æ–≤–æ—Ä–∏ –æ —Ç–æ–º, –æ —á–µ–º –æ–±—ã—á–Ω–æ –º–æ–ª—á–∞—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ, –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã
- –°–æ–∑–¥–∞–≤–∞–π —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥–∞—é—Ç –ª—é–¥—è–º"""
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=4000 if model_to_use == "gpt-4" else 3500,
                temperature=0.8,
                top_p=0.95
            )
            
            article_content = response.choices[0].message.content.strip()
            return self._process_article_content(article_content, analysis)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return None
    
    def _build_writing_prompt(self, analysis: Dict) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏"""
        return f"""
–ù–∞–ø–∏—à–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∏ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:

**–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –¢–ï–ú–ê:** {analysis['main_theme']}
**–°–Æ–ñ–ï–¢:** {analysis['core_narrative']}
**–ü–û–°–´–õ:** {analysis['main_message']}
**–¢–û–ù:** {analysis['emotional_tone']}

**–ò–ù–¢–ï–†–ï–°–ù–´–ï –§–ê–ö–¢–´:**
{chr(10).join(f"- {fact}" for fact in analysis['interesting_facts'])}

**–¢–û, –û –ß–ï–ú –ú–û–õ–ß–ê–¢ –ü–°–ò–•–û–õ–û–ì–ò:**
{chr(10).join(f"- {truth}" for truth in analysis['hidden_truths'])}

**–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:**
{chr(10).join(f"- {advice}" for advice in analysis['practical_advice'])}

**–ö–£–õ–¨–¢–£–†–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø:**
{analysis['cultural_adaptation_notes']}

**–°–¢–†–£–ö–¢–£–†–ê –°–¢–ê–¢–¨–ò:**
- –í–≤–µ–¥–µ–Ω–∏–µ: {analysis['article_structure']['introduction_approach']}
- –ü—Ä–æ–±–ª–µ–º–∞: {analysis['article_structure']['problem_presentation']}
- –†–µ—à–µ–Ω–∏–µ: {analysis['article_structure']['solution_approach']}
- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: {analysis['article_structure']['conclusion_style']}

**–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–¢–ê–¢–¨–ï:**

üéØ **–û–ë–™–ï–ú:** 12,000-18,000 —Å–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
üéØ **–°–¢–†–£–ö–¢–£–†–ê:** HTML —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ h1, h2, h3, –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏ p, —Å–ø–∏—Å–∫–∞–º–∏ ul/li
üéØ **–°–¢–ò–õ–¨:** –ñ–∏–≤–æ–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞

üìñ **–°–û–î–ï–†–ñ–ê–ù–ò–ï:**
- –ù–∞—á–Ω–∏ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—Ä—é—á–∫–∞ (—Ä–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∂–∏–∑–Ω–∏)
- –†–∞—Å–∫—Ä–æ–π –ø—Ä–æ–±–ª–µ–º—É —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –º–µ–Ω—Ç–∞–ª–∏—Ç–µ—Ç–∞
- –ü–æ–∫–∞–∂–∏, —á—Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Å —ç—Ç–∏–º –º–æ–∂–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã
- –í–∫–ª—é—á–∏ —Ç–æ, –æ —á–µ–º –æ–±—ã—á–Ω–æ –º–æ–ª—á–∞—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏
- –ó–∞–≤–µ—Ä—à–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

üá∑üá∫ **–†–û–°–°–ò–ô–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:**
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π/–±–µ–ª–æ—Ä—É—Å—Å–∫–æ–π –∂–∏–∑–Ω–∏
- –£—á–∏—Ç—ã–≤–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–Ω—Ç–∞–ª–∏—Ç–µ—Ç–∞ (—Å–µ–º–µ–π–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏)
- –ì–æ–≤–æ—Ä–∏ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ª–Ω—É–µ—Ç –ª—é–¥–µ–π –≤ –°–ù–ì
- –ò–∑–±–µ–≥–∞–π –∑–∞–ø–∞–¥–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏ –∫–ª–∏—à–µ

üí° **–ü–†–ê–ö–¢–ò–ß–ù–û–°–¢–¨:**
- –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–∏–º—ã–º
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –û–±—ä—è—Å–Ω—è–π "–ø–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö

‚ö° **–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:**
- –í—ã–∑—ã–≤–∞–π —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
- –ü–æ–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —á–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –æ–¥–∏–Ω–æ–∫ –≤ —Å–≤–æ–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
- –î–∞–≤–∞–π –Ω–∞–¥–µ–∂–¥—É –∏ –≤–µ—Ä—É –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã, –ø–æ–Ω—è—Ç–Ω—ã–µ —Ä–æ—Å—Å–∏—è–Ω–∞–º

**–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:**
–ù–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–∏. –°—Ç—Ä—É–∫—Ç—É—Ä–∞:

<h1>–¶–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</h1>
<p>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä—é—á–æ–∫ - —Ä–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è</p>

<h2>–ü—Ä–æ–±–ª–µ–º–∞ –≥–ª–∞–∑–∞–º–∏ —Ä–æ—Å—Å–∏—è–Ω–∏–Ω–∞</h2>
<p>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç</p>

<h2>–ß—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç</h2>
<p>–ê–Ω–∞–ª–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∏ –ø—Ä–∏—á–∏–Ω</p>

<h2>–¢–æ, –æ —á–µ–º –º–æ–ª—á–∞—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏</h2>
<p>–°–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–∏–Ω—ã –∏ –Ω–µ—É–¥–æ–±–Ω—ã–µ —Ñ–∞–∫—Ç—ã</p>

<h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏</h2>
<p>–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</p>

<h2>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>
<p>–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é</p>

**–í–ê–ñ–ù–û:** –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–π—Å—è!
"""
    
    def _process_article_content(self, content: str, analysis: Dict) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = self._extract_title(content)
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            cleaned_content = self._clean_html_content(content)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            meta_title = self._generate_meta_title(title, analysis)
            meta_description = self._generate_meta_description(cleaned_content)
            excerpt = self._generate_excerpt(cleaned_content)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._determine_category(analysis)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
            tags = self._generate_tags(analysis, cleaned_content)
            
            # –°–æ–∑–¥–∞–µ–º FAQ
            faq = self._generate_faq(analysis, cleaned_content)
            
            return {
                'title': title,
                'content': cleaned_content,
                'excerpt': excerpt,
                'meta_title': meta_title,
                'meta_description': meta_description,
                'category': category,
                'tags': tags,
                'faq': faq,
                'word_count': len(cleaned_content.replace(' ', '')),
                'original_analysis': analysis
            }
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—å–∏: {e}")
            return None
    
    def _extract_title(self, content: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ HTML"""
        h1_match = re.search(r'<h1[^>]*>(.*?)</h1>', content, re.IGNORECASE | re.DOTALL)
        if h1_match:
            title = h1_match.group(1).strip()
            # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = re.sub(r'<[^>]+>', '', title).strip()
            return title
        return "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç—å—è"
    
    def _clean_html_content(self, content: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å HTML –∫–æ–Ω—Ç–µ–Ω—Ç"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        content = re.sub(r'\n\s*\n', '\n', content)
        content = re.sub(r' +', ' ', content)
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        content = re.sub(r'<p>\s*</p>', '', content)
        
        return content.strip()
    
    def _generate_meta_title(self, title: str, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        if len(title) <= 60:
            return title
        return title[:57] + "..."
    
    def _generate_meta_description(self, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', content)
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 160 —Å–∏–º–≤–æ–ª–æ–≤
        description = text[:160].strip()
        if len(text) > 160:
            description = description.rsplit(' ', 1)[0] + "..."
        return description
    
    def _generate_excerpt(self, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', content)
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
        excerpt = text[:200].strip()
        if len(text) > 200:
            excerpt = excerpt.rsplit(' ', 1)[0] + "..."
        return excerpt
    
    def _determine_category(self, analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç—å–∏"""
        theme = analysis['main_theme'].lower()
        
        if any(word in theme for word in ['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ª—é–±–æ–≤—å', '—Å–µ–º—å—è', '–±—Ä–∞–∫']):
            return '–û—Ç–Ω–æ—à–µ–Ω–∏—è'
        elif any(word in theme for word in ['—Ç—Ä–µ–≤–æ–≥–∞', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å—Ç—Ä–µ—Å—Å', '–ø–∞–Ω–∏–∫–∞']):
            return '–°—Ç—Ä–µ—Å—Å –∏ —Ç—Ä–µ–≤–æ–≥–∞'
        elif any(word in theme for word in ['–¥–µ—Ç–∏', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ']):
            return '–î–µ—Ç—Å–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è'
        elif any(word in theme for word in ['—Ä–æ—Å—Ç', '–º–æ—Ç–∏–≤–∞—Ü–∏—è', '–ø—Ä–∏–≤—ã—á–∫–∏', '—Ä–∞–∑–≤–∏—Ç–∏–µ']):
            return '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'
        else:
            return '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è'
    
    def _generate_tags(self, analysis: Dict, content: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
        tags = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
        theme = analysis['main_theme'].lower()
        if '—Ç—Ä–µ–≤–æ–≥–∞' in theme:
            tags.extend(['—Ç—Ä–µ–≤–æ–≥–∞', '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', '—Å–∞–º–æ–ø–æ–º–æ—â—å'])
        elif '–æ—Ç–Ω–æ—à–µ–Ω–∏—è' in theme:
            tags.extend(['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '—Å–µ–º—å—è', '–ª—é–±–æ–≤—å'])
        elif '–¥–µ—Ç–∏' in theme:
            tags.extend(['–¥–µ—Ç–∏', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ç–µ–≥–∏
        tags.extend(['–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Å–∞–º–æ–ø–æ–º–æ—â—å', '–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ'])
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return list(set(tags))[:5]
    
    def _generate_faq(self, analysis: Dict, content: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å FAQ –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
        faq = []
        
        # –ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
        theme = analysis['main_theme'].lower()
        
        if '—Ç—Ä–µ–≤–æ–≥–∞' in theme:
            faq.extend([
                {
                    'question': '–ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —É –º–µ–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?',
                    'answer': '–ï—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ –º–µ—à–∞–µ—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –±–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤, —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.'
                },
                {
                    'question': '–ú–æ–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ?',
                    'answer': '–î–∞, –º–Ω–æ–≥–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã, –Ω–æ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –Ω—É–∂–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.'
                }
            ])
        elif '–æ—Ç–Ω–æ—à–µ–Ω–∏—è' in theme:
            faq.extend([
                {
                    'question': '–ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ç–æ–∫—Å–∏—á–Ω—ã?',
                    'answer': '–ï—Å–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç –±–æ–ª—å—à–µ –±–æ–ª–∏, —á–µ–º —Ä–∞–¥–æ—Å—Ç–∏, –∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –∏—Å—Ç–æ—â–µ–Ω–Ω—ã–º.'
                },
                {
                    'question': '–ú–æ–∂–Ω–æ –ª–∏ —Å–ø–∞—Å—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?',
                    'answer': '–î–∞, –µ—Å–ª–∏ –æ–±–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏.'
                }
            ])
        
        return faq[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –≤–æ–ø—Ä–æ—Å–∞
    
    def write_multiple_articles(self, analyses: List[Dict]) -> List[Dict]:
        """–ù–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π"""
        articles = []
        
        for i, analysis in enumerate(analyses, 1):
            logging.info(f"–ü–∏—à—É —Å—Ç–∞—Ç—å—é {i}/{len(analyses)}: {analysis['main_theme']}")
            
            article = self.write_adapted_article(analysis)
            if article:
                articles.append(article)
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {analysis['main_theme']}")
        
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ {len(articles)} –∏–∑ {len(analyses)} —Å—Ç–∞—Ç–µ–π")
        return articles

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å–∞—Ç–µ–ª—è
    logging.basicConfig(level=logging.INFO)
    
    # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_analysis = {
        'main_theme': '–¢—Ä–µ–≤–æ–≥–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
        'core_narrative': '–ú–Ω–æ–≥–∏–µ –ª—é–¥–∏ –∏—Å–ø—ã—Ç—ã–≤–∞—é—Ç —Ç—Ä–µ–≤–æ–≥—É –≤ –±–ª–∏–∑–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
        'main_message': '–¢—Ä–µ–≤–æ–≥–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏ —Å –Ω–µ–π –º–æ–∂–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è',
        'interesting_facts': ['–¢—Ä–µ–≤–æ–≥–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —É 40% –ª—é–¥–µ–π'],
        'hidden_truths': ['–ü—Å–∏—Ö–æ–ª–æ–≥–∏ —á–∞—Å—Ç–æ –Ω–µ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç—Ä–µ–≤–æ–≥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—â–∏—Ç–æ–π'],
        'practical_advice': ['–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è', '–û–±—â–∞–π—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–æ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'],
        'emotional_tone': '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π',
        'target_audience': '–õ—é–¥–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö',
        'cultural_adaptation_notes': '–£—á–µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –º–µ–Ω—Ç–∞–ª–∏—Ç–µ—Ç–∞',
        'article_structure': {
            'introduction_approach': '–ù–∞—á–∞—Ç—å —Å –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∂–∏–∑–Ω–∏',
            'problem_presentation': '–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ',
            'solution_approach': '–î–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã',
            'conclusion_style': '–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ'
        },
        'local_examples_needed': ['–†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã'],
        'sensitivity_notes': '–£—á–µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—É–ª—å—Ç—É—Ä—ã'
    }
    
    writer = ArticleWriter()
    article = writer.write_adapted_article(test_analysis)
    
    if article:
        print("–°—Ç–∞—Ç—å—è –Ω–∞–ø–∏—Å–∞–Ω–∞:")
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article['title']}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article['category']}")
        print(f"–¢–µ–≥–∏: {', '.join(article['tags'])}")
        print(f"–°–ª–æ–≤: {article['word_count']}")
    else:
        print("–û—à–∏–±–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏")
